unit BaseAction;

interface

uses
  System.SysUtils, Web.HTTPApp, View, IdCustomHTTPServer;

type
  TBaseAction = class
  private
    FRequest: TWebRequest;
    FResponse: TWebResponse;
    FActionPath: string;
    procedure SetRequest(const Value: TWebRequest);
    procedure SetResponse(const Value: TWebResponse);
    procedure SetActionPath(const Value: string);
  protected
  public
    View: TView;
    Error: Boolean;
    function isPOST:Boolean;
    function isGET:Boolean;
    function isNil(text: string): Boolean; //判断空值
    function isNotNil(text: string): Boolean; //判断空值
    function Interceptor: boolean; //拦截器
    procedure CreateView();
    constructor Create();
    destructor Destroy; override;
    function AppPath:string;//获取项目物理路径
    property Request: TWebRequest read FRequest write SetRequest;
    property Response: TWebResponse read FResponse write SetResponse;
    property ActionPath: string read FActionPath write SetActionPath;
  end;

implementation

{ TBaseAction }
function TBaseAction.Interceptor: boolean;  //拦截器
var
  url: string;
begin
  Result := false;
  with View do
  begin
    url := LowerCase(Request.PathInfo);
    if (Error) then
    begin
      Result := true;
      exit;
    end;
    if (url <> '/') and (url <> '/index') and (url <> '/check') and (url <> '/checknum') and (url <> '/favicon.ico') then
    begin
      if (SessionGet('username') = '') then
      begin
        Result := true;
        Response.Content := '<script>window.location.href=''/'';</script>';
        Response.SendResponse;
      end;
    end;
  end;
end;

function TBaseAction.isGET: Boolean;
begin
   Result:=Request.MethodType = mtGet;
end;

function TBaseAction.isNil(text: string): Boolean;
begin
  if (Trim(text) = '') then
    Result := true
  else
    Result := false;
end;

function TBaseAction.isNotNil(text: string): Boolean;
begin
  Result:=not isNil(text);
end;

function TBaseAction.isPOST: Boolean;
begin
  Result:=Request.MethodType = mtPost;
end;

procedure TBaseAction.SetActionPath(const Value: string);
begin
  FActionPath := Value;
end;

procedure TBaseAction.SetRequest(const Value: TWebRequest);
begin
  FRequest := Value;
end;

procedure TBaseAction.SetResponse(const Value: TWebResponse);
begin
  FResponse := Value;
end;

constructor TBaseAction.Create();
begin
  View := nil;
  ActionPath := '';
end;

procedure TBaseAction.CreateView;
begin
  try
    View := TView.Create(Response, Request, ActionPath);
  except
    on e: Exception do
    begin
      self.Response.Content := e.ToString;
      Error := true;
    end;
  end;
end;

destructor TBaseAction.Destroy;
begin
  FreeAndNil(View);
  inherited;
end;

end.

